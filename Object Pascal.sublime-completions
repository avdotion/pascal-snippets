{
	"scope": "source.pascal",
	"completions":
	[
		"pascal",

		{ "trigger": "Byte", "contents": "Byte" },
		{ "trigger": "Shortint", "contents": "Shortint" },
		{ "trigger": "Smallint", "contents": "Smallint" },
		{ "trigger": "Word", "contents": "Word" },
		{ "trigger": "DWord", "contents": "DWord" },
		{ "trigger": "Integer", "contents": "Integer" },
		{ "trigger": "Cardinal", "contents": "Cardinal" },
		{ "trigger": "Longint", "contents": "Longint" },
		{ "trigger": "Longword", "contents": "Longword" },
		{ "trigger": "Int64", "contents": "Int64" },
		{ "trigger": "QWord", "contents": "QWord" },
		{ "trigger": "Real", "contents": "Real" },
		{ "trigger": "Single", "contents": "Single" },
		{ "trigger": "Double", "contents": "Double" },
		{ "trigger": "Extended", "contents": "Extended" },
		{ "trigger": "Comp", "contents": "Comp" },
		{ "trigger": "Currency", "contents": "Currency" },
		{ "trigger": "Boolean", "contents": "Boolean" },
		{ "trigger": "ByteBool", "contents": "ByteBool" },
		{ "trigger": "WordBool", "contents": "WordBool" },
		{ "trigger": "LongBool", "contents": "LongBool" },
		{ "trigger": "Char", "contents": "Char" },
		{ "trigger": "WideChar", "contents": "WideChar" },
		{ "trigger": "PChar", "contents": "PChar" },
		{ "trigger": "String", "contents": "String" },
		{ "trigger": "AnsiString", "contents": "AnsiString" },
		{ "trigger": "Variant", "contents": "Variant" },

		{ "trigger": "IOResult", "contents": "IOResult" },
		{ "trigger": "abs", "contents": "abs($0)" },
		{ "trigger": "append", "contents": "append(${0:file})" },
		{ "trigger": "arctan", "contents": "arctan($0)" },
		{ "trigger": "assign", "contents": "assign(${1:file}, '${2:input.txt}')" },
		{ "trigger": "BlockRead", "contents": "BlockRead(${1:file}, ${2:buf}, ${3:count}, ${4:result})" },
		{ "trigger": "BlockWrite", "contents": "BlockWrite(${1:file}, ${2:buf}, ${3:count}, ${4:result})" },
		{ "trigger": "chr", "contents": "chr($0)" },
		{ "trigger": "close", "contents": "close(${0:file})" },
		{ "trigger": "clrscr", "contents": "clrscr" },
		{ "trigger": "concat", "contents": "concat($0)" },
		{ "trigger": "copy", "contents": "copy(${1:str}, ${2:pos}, ${3:n})" },
		{ "trigger": "cos", "contents": "cos($0)" },
		{ "trigger": "dec", "contents": "dec($0)" },
		{ "trigger": "delete", "contents": "delete(${1:str}, ${2:pos}, ${3:n})" },
		{ "trigger": "eof", "contents": "eof(${0:file})" },
		{ "trigger": "eoln", "contents": "eoln(${0:file})" },
		{ "trigger": "erase", "contents": "erase(${0:file})" },
		{ "trigger": "exp", "contents": "exp(${1:n} * ln(${2:x}))" },
		{ "trigger": "filePos", "contents": "filePos(${0:file})" },
		{ "trigger": "fileSize", "contents": "fileSize(${0:file})" },
		{ "trigger": "flush", "contents": "flush(${0:file})" },
		{ "trigger": "frac", "contents": "frac($0)" },
		{ "trigger": "gotoxy", "contents": "gotoxy(${1:x}, ${2:y})" },
		{ "trigger": "inc", "contents": "inc($0)" },
		{ "trigger": "insert", "contents": "insert(${1:sub_str}, ${2:str}, ${3:pos})" },
		{ "trigger": "int", "contents": "int($0)" },
		{ "trigger": "length", "contents": "length($0)" },
		{ "trigger": "ln", "contents": "ln($0)" },
		{ "trigger": "lowercase", "contents": "lowercase($0)" },
		{ "trigger": "odd", "contents": "odd($0)" },
		{ "trigger": "ord", "contents": "ord($0)" },
		{ "trigger": "3.141593...", "contents": "pi" },
		{ "trigger": "pos", "contents": "pos(${1:sub_str}, ${2:str})" },
		{ "trigger": "pred", "contents": "pred($0)" },
		{ "trigger": "random", "contents": "random($0)" },
		{ "trigger": "randomize", "contents": "randomize" },
		{ "trigger": "read", "contents": "read${1:ln}(${2:statement})" },
		{ "trigger": "readkey", "contents": "readkey($0)" },
		{ "trigger": "rename", "contents": "rename(${1:file}, ${2:new_name})" },
		{ "trigger": "reset", "contents": "reset(${0:file})" },
		{ "trigger": "rewrite", "contents": "rewrite(${0:file})" },
		{ "trigger": "round", "contents": "round($0)" },
		{ "trigger": "seekEOF", "contents": "seekEOF(${0:file})" },
		{ "trigger": "seekEOLn", "contents": "seekEOLn(${0:file})" },
		{ "trigger": "setTextBuf", "contents": "SetLength(${1:array}, ${2:n})" },
		{ "trigger": "setTextBuf", "contents": "setTextBuf(${1:file}, ${2:buf})" },
		{ "trigger": "sin", "contents": "sin($0)" },
		{ "trigger": "sqr", "contents": "sqr($0)" },
		{ "trigger": "sqrt", "contents": "sqrt($0)" },
		{ "trigger": "str", "contents": "str(${1:n}, ${2:str})" },
		{ "trigger": "succ", "contents": "succ($0)" },
		{ "trigger": "textbackground", "contents": "textbackground($0)" },
		{ "trigger": "textcolor", "contents": "textcolor($0)" },
		{ "trigger": "trunc", "contents": "trunc($0)" },
		{ "trigger": "truncate", "contents": "truncate(${0:file})" },
		{ "trigger": "upcase", "contents": "upcase($0)" },
		{ "trigger": "val", "contents": "val(${1:str}, ${2:n}, ${3:error})" },
		{ "trigger": "write", "contents": "write${1:ln}(${2:statement})" },
		{ "trigger": "with", "contents": "with $1 do${0: }" },
		{ "trigger": "array", "contents": "array[${1:1}..$2] of ${Integer}" },		
		
	]
}
